package ch.zhaw.catan {
	class App {
		+ App ()
		+ {static} void main (String[] args)
	}
	
	
	
	class Config {
		+ int MIN_NUMBER_OF_PLAYERS
		+ Point INITIAL_THIEF_POSITION
		+ Map<Resource, Integer> INITIAL_RESOURCE_CARDS_BANK
		- int NUMBER_OF_ROADS_PER_PLAYER
		- int NUMBER_OF_SETTLEMENTS_PER_PLAYER
		- int NUMBER_OF_CITIES_PER_PLAYER
		+ int MAX_CARDS_IN_HAND_NO_DROP
		+ Config ()
		+ {static} Map<Point, Integer> getStandardDiceNumberPlacement ()
		+ {static} Map<Point, Land> getStandardLandPlacement ()
	}
	
	
	
	class Controller {
		- int WIN_POINTS
		- TextIO io
		- Random random
		+ Controller ()
		-  TextIO getIO ()
		-  TextTerminal<?> getTextTerminal ()
		-  void printCurrentGameState (SiedlerGame game, SiedlerBoardTextView textView)
		-  void printReceivedResources (Map<Faction, List> newResources)
		-  ActionType promptNextAction ()
		+  void run ()
		-  void runInitialPhase (int playerCount, SiedlerGame game, SiedlerBoardTextView textView)
		-  void runMainPhase (SiedlerGame game, SiedlerBoardTextView textView)
		-  boolean runTurn (SiedlerGame game, SiedlerBoardTextView textView)
		-  void switchIfNoWinner (SiedlerGame game)
	}
	
	
	
	class Dummy {
		+ Dummy ()
		+ {static} T getEnumValue (TextIO textIO, Class<T> commands)
		+ {static} void main (String[] args)
		-  void run ()
	}
	
	
	
	class InventoryPrinter {
		- SiedlerGame game
		+ InventoryPrinter (SiedlerGame game)
		-  Map<Resource, Integer> getResourceOfCurrentPlayer ()
		+  void printPlayerInventory (TextTerminal<?> textTerminal)
	}
	
	
	
	class SiedlerBoard {
		+ SiedlerBoard ()
		+ {static} SiedlerBoard createStandartSiedlerBoard ()
		+  List<Point> getFieldsForDiceValue (int dice)
		+  List<Land> getLandsForCorner (Point corner)
		+  List<Player> getPlayersAroundField (Point field)
		+  boolean hasAdjacentSettlement (Point startPoint, Point endPoint, Faction owner)
		+  boolean hasAdjacentStreet (Point position, Faction owner)
		+  boolean hasAdjacentStreet (Point startPoint, Point endPoint, Faction owner)
		+  boolean hasSettlement (Point location, Faction owner)
		-  boolean isCornerTouchingLand (Point cornerPosition)
		+  boolean isValidInitialSettlementLocation (Point position, Faction owner)
		+  boolean isValidInitialStreetLocation (Point startPoint, Point endPoint, Faction owner)
		+  boolean isValidSettlementLocation (Point position, Faction owner)
		+  boolean isValidStreetLocation (Point startPoint, Point endPoint, Faction owner)
	}
	
	SiedlerBoard --|> HexBoard
	
	class SiedlerBoardTextView {
		- char SETTLEMENT_CHAR
		- char CITY_CHAR
		- Label EMPTY_LABEL
		- SiedlerBoard board
		+ SiedlerBoardTextView (SiedlerBoard board)
		-  Label createLabelFromObject (Object o)
		#  Label getCornerLabel (SiedlerSettlement c)
		#  Label getEdgeLabel (SiedlerStreet e)
		#  Label getFieldLabelUpper (SiedlerField f)
		-  Label getLabelForDiceValue (int diceValue)
		-  Label getLabelForPlayer (Player player)
		-  Label getLabelForStructure (SiedlerSettlement structure)
		-  void setDiveValues ()
	}
	
	SiedlerBoardTextView --|> HexBoardTextView
	
	class SiedlerGame {
		- int FOUR_TO_ONE_TRADE_OFFER
		- int FOUR_TO_ONE_TRADE_WANT
		- int winPoints
		- int numberOfPlayers
		- int currentPlayer
		- Player[] players
		- Bank bank
		- Point thiefPoint
		- SiedlerBoard board
		- Random random
		+ SiedlerGame (int winPoints, int numberOfPlayers)
		+  boolean buildCity (Point position)
		+  boolean buildRoad (Point roadStart, Point roadEnd)
		+  boolean buildSettlement (Point position)
		+  SiedlerBoard getBoard ()
		#  Player getCurrentPlayer ()
		+  Faction getCurrentPlayerFaction ()
		+  int getCurrentPlayerResourceStock (Resource resource)
		-  Map<Faction, List> getEmptyResourceMap ()
		+  List<Faction> getPlayerFactions ()
		-  Player getRandomPlayerWithResources (Point field)
		-  int getScore (Faction faction)
		-  SiedlerField getSiedlerFieldOrNull (Point fieldPosition)
		+  Point getThiefPosition ()
		+  Faction getWinner ()
		-  void handleSeven ()
		-  void payoutInitialSettlement (Point position)
		+  boolean placeInitialRoad (Point roadStart, Point roadEnd)
		+  boolean placeInitialSettlement (Point position, boolean payout)
		+  boolean placeThiefAndStealCard (Point fieldPosition)
		-  void stealRandomResource (Point field)
		+  void switchToNextPlayer ()
		+  void switchToPreviousPlayer ()
		+  Map<Faction, List> throwDice (int diceThrow)
		+  boolean tradeWithBankFourToOne (Resource offer, Resource want)
	}
	
	
}
package ch.zhaw.catan.interaction {
	class Action {
		- SiedlerGame game
		- TextIO io
		# Action (SiedlerGame game)
		+ {abstract} boolean execute ()
		+  void executeUntilSuccessful ()
		#  SiedlerGame getGame ()
		#  TextIO getIO ()
	}
	
	
	
	class BuildSelectionAction {
		+ BuildSelectionAction (SiedlerGame game)
		+  boolean execute ()
	}
	
	BuildSelectionAction --|> Action
	
	class BuildingAction {
		# BuildingAction (SiedlerGame game)
		# {abstract} boolean buildStructure (Point coordinate)
		#  Point getStructureInfo ()
	}
	
	BuildingAction --|> StructureAction
	
	class CityAction {
		+ CityAction (SiedlerGame game)
		#  boolean buildStructure (Point coordinate)
		#  String getHeading ()
	}
	
	CityAction --|> BuildingAction
	
	class InitialSettlementAction {
		- boolean payout
		+ InitialSettlementAction (SiedlerGame game, boolean payout)
		#  boolean buildStructure (Point coordinate)
		+  boolean getPayout ()
	}
	
	InitialSettlementAction --|> SettlementAction
	
	class InitialStreetAction {
		+ InitialStreetAction (SiedlerGame game)
		#  boolean buildStructure (StreetInfo info)
	}
	
	InitialStreetAction --|> StreetAction
	
	class PlaceThiefAction {
		+ PlaceThiefAction (SiedlerGame game)
		#  boolean buildStructure (Point info)
		#  String getHeading ()
	}
	
	PlaceThiefAction --|> BuildingAction
	
	class SettlementAction {
		+ SettlementAction (SiedlerGame game)
		#  boolean buildStructure (Point coordinate)
		#  String getHeading ()
	}
	
	SettlementAction --|> BuildingAction
	
	class StreetAction {
		+ StreetAction (SiedlerGame game)
		#  boolean buildStructure (StreetInfo info)
		#  String getHeading ()
		#  StreetInfo getStructureInfo ()
		#  String getXCoordinatePrompt ()
		#  String getYCoordinatePrompt ()
	}
	
	StreetAction --|> StructureAction
	
	class StructureAction<T> {
		# StructureAction (SiedlerGame game)
		# {abstract} boolean buildStructure (T info)
		+  boolean execute ()
		#  Point fetchCoordinate ()
		# {abstract} String getHeading ()
		#  int getMaxXCoordinate ()
		#  int getMaxYCoordinate ()
		# {abstract} T getStructureInfo ()
		#  String getXCoordinatePrompt ()
		#  String getYCoordinatePrompt ()
	}
	
	StructureAction --|> Action
	
	class TradeAction {
		+ TradeAction (SiedlerGame game)
		+  boolean execute ()
	}
	
	TradeAction --|> Action
}
package ch.zhaw.catan.model {
	class ActionType {
		+ ActionType Trade
		+ ActionType Build
		+ ActionType End
		+ ActionType Quit
		- ActionType ()
	}
	
	ActionType --|> Enum
	
	class Bank {
		+ Bank ()
		+ Bank (Map<Resource, Integer> resources)
	}
	
	Bank --|> ResourceHolder
	
	class Player {
		- Faction faction
		+ Player (Faction faction)
		+ Player (Faction faction, Map<Resource, Integer> resources)
		+  boolean equals (Object obj)
		+  Faction getFaction ()
		+  int hashCode ()
		+  String toString ()
	}
	
	Player --|> ResourceHolder
	
	class ResourceHolder {
		- Map<Resource, Integer> resources
		# ResourceHolder ()
		# ResourceHolder (Map<Resource, Integer> resources)
		+  void decrementResource (Resource resource, int by)
		+  void decrementResources (Map<Resource, Long> resourceMap)
		+  boolean equals (Object obj)
		+  int getAllResourcesCount ()
		+  Resource[] getResourceArray ()
		+  int getResourceCount (Resource resource)
		#  Map<Resource, Integer> getResourceMap ()
		+  boolean hasResources (Map<Resource, Long> resourceMap)
		+  int hashCode ()
		+  void incrementResource (Resource resource, int by)
		+  void incrementResources (Map<Resource, Long> resourceMap)
		+  void setResource (Resource resource, int count)
	}
	
	
	
	class SiedlerCity {
		- int VICTORY_POINTS
		- int RESOURCE_COUNT
		+ SiedlerCity (Player owner)
		+  int getResourceCount ()
		+  int getVictoryPoints ()
	}
	
	SiedlerCity --|> SiedlerSettlement
	
	class SiedlerField {
		- Land fieldType
		- int diceValue
		+ SiedlerField (Land fieldType, int diceValue)
		+  boolean equals (Object obj)
		+  int getDiceValue ()
		+  Land getFieldType ()
		+  int hashCode ()
	}
	
	
	
	class SiedlerSettlement {
		- int VICTORY_POINTS
		- int RESOURCE_COUNT
		+ SiedlerSettlement (Player owner)
		+ SiedlerSettlement (Player owner, Structure structure)
		+  int getResourceCount ()
		+  int getVictoryPoints ()
	}
	
	SiedlerSettlement --|> SiedlerStructure
	
	class SiedlerStreet {
		+ SiedlerStreet (Player owner)
	}
	
	SiedlerStreet --|> SiedlerStructure
	
	class SiedlerStructure {
		- Player owner
		- Structure structure
		+ SiedlerStructure (Player owner, Structure structure)
		+  boolean equals (Object obj)
		+  Player getOwner ()
		+  Structure getStructure ()
		+  int hashCode ()
	}
	
	
}
package ch.zhaw.hexboard {
	class Edge {
		- Point start
		- Point end
		+ Edge (Point p1, Point p2)
		+  boolean equals (Object obj)
		+  int hashCode ()
		~ {static} boolean isEdge (Point p1, Point p2)
		+  boolean isEdgePoint (Point p1)
		+  String toString ()
	}
	
	
	
	class FieldAnnotationPosition {
		- Point field
		- Point corner
		+ FieldAnnotationPosition (Point field, Point corner)
		+  boolean equals (Object obj)
		+  int hashCode ()
		+  boolean isCorner (Point p)
		+  boolean isField (Point p)
		+  String toString ()
	}
	
	
	
	class HexBoard<F, C, E> {
		- int maxCoordinateX
		- int maxCoordinateY
		- Map<Point, F> field
		- Map<Point, C> corner
		- Map<Edge, E> edge
		- Map<FieldAnnotationPosition, A> annotation
		+ HexBoard ()
		+  void addField (Point center, F element)
		+  void addFieldAnnotation (Point center, Point corner, A data)
		-  List<Edge> constructEdgesOfField (Point position)
		# {static} List<Point> getAdjacentCorners (Point position)
		+  List<E> getAdjacentEdges (Point corner)
		- {static} List<Point> getAdjacentFields (Point corner)
		+  C getCorner (Point location)
		#  Set<Point> getCornerCoordinates ()
		- {static} List<Point> getCornerCoordinatesOfField (Point position)
		+  List<C> getCorners ()
		+  List<C> getCornersOfField (Point center)
		+  E getEdge (Point p1, Point p2)
		+  F getField (Point center)
		+  A getFieldAnnotation (Point center, Point corner)
		+  List<A> getFieldAnnotationsForCorner (Point corner)
		+  List<A> getFieldAnnotationsForField (Point center)
		+  List<Point> getFields ()
		+  List<F> getFields (Point corner)
		~  int getMaxCoordinateX ()
		~  int getMaxCoordinateY ()
		+  List<C> getNeighboursOfCorner (Point center)
		+  boolean hasCorner (Point location)
		+  boolean hasEdge (Point p1, Point p2)
		+  boolean hasField (Point center)
		~ {static} boolean isCorner (Point field, Point corner)
		~ {static} boolean isCornerCoordinate (Point p)
		~ {static} boolean isFieldCoordinate (Point position)
		+  C setCorner (Point location, C data)
		+  void setEdge (Point p1, Point p2, E data)
	}
	
	
	
	class HexBoardTextView<F, C, E, A> {
		- String ONE_SPACE
		- String TWO_SPACES
		- String FOUR_SPACES
		- String FIVE_SPACES
		- String SIX_SPACES
		- String SEVEN_SPACES
		- String NINE_SPACES
		- HexBoard<F, C, E, A> board
		- Label emptyLabel
		- Label defaultDiagonalEdgeDownLabel
		- Label defaultDiagonalEdgeUpLabel
		- Label defaultVerticalEdgeLabel
		- Map<Point, Label> fixedLowerFieldLabels
		+ HexBoardTextView (HexBoard<F, C, E, A> board)
		-  Label deriveLabelFromToStringRepresentation (Object o)
		-  Label determineEdgeLabel (boolean isDown, Point edgeStart, Point edgeEnd)
		-  Label getAnnotationLabel (A annotation)
		#  Label getCornerLabel (C c)
		#  Label getEdgeLabel (E e)
		-  Label getFieldLabelLower (Point p)
		#  Label getFieldLabelUpper (F f)
		-  String printCornerLine (int y)
		-  String printDiagonalEdges (int y)
		-  String printMiddlePartOfField (int y)
		+  void setLowerFieldLabel (Point field, Label label)
		+  String toString ()
	}
	
	
	
	class Label {
		+ char DEFAULT_CHARACTER
		- char first
		- char second
		+ Label ()
		+ Label (char firstChar, char secondChar)
		+  char getFirst ()
		+  char getSecond ()
		+  String toString ()
	}
	
	
}
