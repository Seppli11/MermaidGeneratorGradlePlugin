/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ninja.seppli.umlgenerator.scanner;

import java.nio.file.InvalidPathException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ninja.seppli.umlgenerator.scanner.model.DiagramModel;
import ninja.seppli.umlgenerator.scanner.model.packagelist.PackageList;
import spoon.Launcher;
import spoon.processing.ProcessingManager;
import spoon.reflect.CtModel;
import spoon.reflect.factory.Factory;
import spoon.support.QueueProcessingManager;

/**
 * Generates a {@link DiagramModel} from java source files
 */
public class DiagramGenerator {
    /**
     * logger
     */
    private Logger logger = LoggerFactory.getLogger(getClass());

    /**
     * which packages are ignored by default
     */
    private final PackageList DEFAULT_PACKAGES_TO_IGNORE = PackageList.createFromPackagePaths("java.lang");

    /**
     * the paths which should be scanned
     */
    private Set<Path> pathList = new HashSet<>();

    /**
     * Constructor
     */
    public DiagramGenerator() {
    }

    /**
     * The given files will be scanned when {@link #scan()} is called.
     * If a folder is given, all files in the folder and in its subfolders are
     * scanned.
     * 
     * @param paths the paths to scan
     * @returns this instance for a fluent like api
     * @see #addFiles(Path...)
     * @throws InvalidPathException if the given pahts couldn't be converted to a
     *                              valid path
     */
    public DiagramGenerator addFiles(String... paths) {
        Path[] pathObjs = Arrays.stream(paths).map(Paths::get).toArray(Path[]::new);
        addFiles(pathObjs);
        return this;
    }

    /**
     * The given files will be scanned when {@link #scan()} is called.
     * If a folder is given, all files in the folder and in its subfolders are
     * scanned.
     * 
     * @param paths the paths to scan
     * @returns this instance for a fluent like api
     * @see #addFiles(String...)
     */
    public DiagramGenerator addFiles(Path... paths) {
        pathList.addAll(Arrays.asList(paths));
        return this;
    }

    /**
     * Scanns the folder and files added by {@link #addFiles(Path...)},
     * {@link #addFiles(String...)} and {@link #addFolder(String)}.
     * 
     * @returns the built {@link DiagramModel}
     * @see #addFiles(Path...)
     * @see #addFiles(String...)
     * @see #addFolder(String)
     */
    public DiagramModel scan() {
        Launcher launcher = new Launcher();
        pathList.stream().map(Path::toAbsolutePath).filter(this::fileExistsFilter).map(Path::toString)
                .forEach(launcher::addInputResource);
        launcher.run();
        launcher.process();
        Factory factory = launcher.getFactory();
        ProcessingManager processingManager = new QueueProcessingManager(factory);
        processingManager.process(factory.Module().getAllModules());
        CtModel ctModel = launcher.getModel();
        SpoonClassProcessor classProcessor = new SpoonClassProcessor();
        classProcessor.processModel(ctModel);
        return classProcessor.getMermaidModel();
    }

    /**
     * Checks if the given path acually exists. This is used as a predicate.
     * 
     * @param path the path to check
     * @return if the path exists or not
     */
    private boolean fileExistsFilter(Path path) {
        if (!path.toFile().exists()) {
            logger.warn("File \"{}\" doesn't exist", path);
            return false;
        }
        return true;
    }

    public static void main(String[] args) {
        // new DiagramGenerator().addFiles("library/").scan();
        new DiagramGenerator().addFiles("gradle-test-build/").scan();
    }

}
